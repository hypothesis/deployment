## Extension to deploy and execute firewall script
#
# The core function of this script is to stop Via users from being
# able to access:
#   1. The AWS metadata service `169.254.169.254`.
#   2. RFC1918 Private IP Addresses
# Whilst enabling the container to peform DNS resolution.
#
# A solution has been found with IP tables. The script deployed by 
# this exetension does make assumptions on the IP address of the
# docker container being 1 of 2 adresses. During testing we have not
# seen any problems. However, this might not always be the case.
#
files:
  "/root/firewall.sh" :
    mode: "000755"
    owner: root
    group: root
    content: |
      container_ip_one='172.17.0.2'
      container_ip_two='172.17.0.3'
      iptables --flush DOCKER-USER
      iptables --insert DOCKER-USER --jump REJECT
      iptables --insert DOCKER-USER --destination 10.0.0.0/8 --jump REJECT
      iptables --insert DOCKER-USER --destination 172.16.0.0/12 --jump REJECT
      iptables --insert DOCKER-USER --destination 192.168.0.0/16 --jump REJECT
      iptables --insert DOCKER-USER --protocol tcp --destination $container_ip_one --jump ACCEPT
      iptables --insert DOCKER-USER --protocol tcp --source $container_ip_one --jump ACCEPT
      iptables --insert DOCKER-USER --protocol tcp --destination $container_ip_two --jump ACCEPT
      iptables --insert DOCKER-USER --protocol tcp --source $container_ip_two --jump ACCEPT
      iptables --insert DOCKER-USER --protocol udp --destination-port 53 --jump ACCEPT
      iptables --insert DOCKER-USER --protocol udp --source-port 53 --jump ACCEPT
      iptables --insert DOCKER-USER --destination 169.254.169.254 --jump REJECT
      iptables-save > /etc/sysconfig/iptables
container_commands:
  firewall:
    command: "sh /root/firewall.sh"
