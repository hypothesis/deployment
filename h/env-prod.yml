AWSConfigurationTemplateVersion: 1.1.0.0
Platform:
  PlatformArn: arn:aws:elasticbeanstalk:us-west-1::platform/Docker running on 64bit Amazon Linux/2.12.14
EnvironmentTier:
  Type: Standard
  Name: WebServer
OptionSettings:
  aws:elasticbeanstalk:cloudwatch:logs:
    StreamLogs: true
    RetentionInDays: "7"
  aws:elasticbeanstalk:command:
    DeploymentPolicy: RollingWithAdditionalBatch
    BatchSizeType: Percentage
    BatchSize: '100'
  aws:elasticbeanstalk:environment:
    EnvironmentType: LoadBalanced
    LoadBalancerType: application
    ServiceRole: aws-elasticbeanstalk-service-role
  aws:elasticbeanstalk:environment:process:default:
    HealthCheckPath: /_status
  aws:elasticbeanstalk:healthreporting:system:
    SystemType: enhanced
  aws:ec2:vpc:
    Subnets: subnet-0f19e456,subnet-ee2c418b
    VPCId: vpc-bc4d91d9
    ELBSubnets: subnet-9bf985c3,subnet-3b21015f
    ELBScheme: public
    AssociatePublicIpAddress: true
  aws:autoscaling:updatepolicy:rollingupdate:
    RollingUpdateType: Immutable
    RollingUpdateEnabled: true
  aws:elbv2:listener:default:
    ListenerEnabled: false
  aws:elbv2:listener:443:
    ListenerEnabled: true
    SSLPolicy: ELBSecurityPolicy-TLS-1-2-2017-01
    SSLCertificateArns: arn:aws:acm:us-west-1:964867326460:certificate/ef36b626-66e0-495e-813c-71a3b883f692
    DefaultProcess: default
    Protocol: HTTPS
  aws:autoscaling:launchconfiguration:
    SecurityGroups: sg-fdf9c19a,sg-a6073fc1
    IamInstanceProfile: aws-elasticbeanstalk-ec2-role
    InstanceType: m4.large
    EC2KeyName: ops-20191105
  aws:autoscaling:asg:
    MaxSize: '18'
    MinSize: '4'
  # Based on constant-load testing against the badge endpoint (which forms our
  # baseline load as of 2017-06-26), a single m4.large instance will begin to
  # suffer latency degradations as request rates approach 60 req/s,
  # corresponding to outbound traffic to the internet of about 65kBps.
  #
  # Using a margin of safety, let's call this 50kBps. Multiplying this up by
  # the 5 minute accumulation period, this gives a scale-out threshold of about
  # 15e6 bytes per-instance over that period.
  AWSEBCloudwatchAlarmHigh.aws:autoscaling:trigger:
    UpperThreshold: '15000000'
  # Similar constant-load testing shows that a single m4.large instance will
  # happily serve 30 req/s (and ~32kBps to the internet) constantly, with
  # relatively low utilisation. This gives us a scale in threshold of:
  #
  #     32kBps * 5 min = 9.6e6 bytes
  #
  # BUT it is important that the scale-in threshold is less than 1/2 of the
  # scale-out threshold (UpperThreshold) by some margin, otherwise overall
  # traffic levels corresponding to ~UpperThreshold will result in constant
  # scaling activity with the cluster switching between 1 and 2 instances
  # forever.
  #
  # As such, we pick roughly 0.9 * (UpperThreshold / 2) as the value for the
  # LowerThreshold.
  AWSEBCloudwatchAlarmLow.aws:autoscaling:trigger:
    BreachDuration: '5'
    EvaluationPeriods: '2'
    Period: '5'
    LowerThreshold: '7000000'
    MeasureName: NetworkOut
    Statistic: Average
    Unit: Bytes
